/* 2090. K Radius Subarray Averages
Link:https://leetcode.com/problems/k-radius-subarray-averages/description/
*/
class Solution {
public:
    vector<int> getAverages(vector<int>& nums, int k) {
        
        
        long long int n=nums.size();
        int i,j;
        
        vector<long long int>pfx(n,0);
        pfx[0]=nums[0];
        for(i=1;i<n;i++)
        {
            pfx[i]=pfx[i-1]+nums[i];
            
        }
        vector<int>ans(n,-1);
        for(i=k;i<n;i++)
        {
            if(i-k>=0 and i+k<n)
            {
                long long int op1=pfx[i+k];
                long long int op2=0;
                if(i-k-1>=0)
                {
                    op2+=pfx[i-k-1];
                }
                ans[i]=(op1-op2)/(2*k+1);
            }
        }
        return ans;
    }
};
