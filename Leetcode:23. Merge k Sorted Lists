/*  23. Merge k Sorted Lists
   Link: https://leetcode.com/problems/merge-k-sorted-lists/description/
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class comp{
  public :
    bool operator()(ListNode* a , ListNode* b){
        return a->val>b->val;
    }
};
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*,vector<ListNode*>,comp>pq;
        ListNode * dum=new ListNode(-1);
        auto prev=dum;
        for(auto l:lists) if(l) pq.push(l);
        while(pq.size()>0){
            auto node=pq.top();pq.pop();
            prev->next=node;
            prev=node;
            if(node->next) pq.push(node->next);
        }
        return dum->next;
    }
};
