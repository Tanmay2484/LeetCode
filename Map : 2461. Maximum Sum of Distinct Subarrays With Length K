/* 2461. Maximum Sum of Distinct Subarrays With Length K
  Link : https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/description/
*/
class Solution {
public:
    long long maximumSubarraySum(vector<int>& A, int k) {
    unordered_map<int, int> mp;
    long maxi = 0, sum = 0;
    for (int i = 0; i < size(A); i++){//storing the sum of all element in the map
        sum += A[i]; //
        mp[A[i]]++;

        if (i >= k - 1){
            if (mp.size() == k) maxi = max(maxi, sum);//when map size == k then we have to erase the map and we have to take the maximum sum
            sum -= A[i - k + 1];
            if (--mp[A[i - k + 1]] == 0) mp.erase(A[i - k + 1]);// erasing the key
        }
    }
    return maxi;
}
};
