/* Average of Levels in Binary Tree
  Link : https://leetcode.com/problems/average-of-levels-in-binary-tree/
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int level, vector<int> &elements, vector<double> &average){
        if(root==nullptr) return;
        if(elements.size()<=level){            // If we are visiting this level first time
            elements.push_back(0);             // initilize elements at this level as 0
            average.push_back(0.0);            // initilize average till now as 0.0
        }
        elements[level] += 1;     // Increment the number of elements at this level
        average[level] = ((average[level] * (elements[level] - 1)) + root->val) / elements[level];
		
		// Calculating average by using previous average and previous number of elements
		// prev sum = prev average * prev number of elements
		// new average = (prev sum + curr node value) / new number of elements
		
		// dfs calls for unvisited nodes
        dfs(root->left,level+1,elements,average);   
        dfs(root->right,level+1,elements,average);
    }
    vector<double> averageOfLevels(TreeNode* root) {
        vector<int> elements;
        vector<double> average;
        dfs(root,0,elements, average);
        return average;
    }
};
