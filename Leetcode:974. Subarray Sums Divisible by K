/*974. Subarray Sums Divisible by K
  Link: https://leetcode.com/problems/subarray-sums-divisible-by-k/description/
*/
class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
     unordered_map<int,int>mp;
        mp[0]=1;
        int prefix_sum=0,ans=0;
        for(int i=0;i<nums.size();i++){
            prefix_sum+=nums[i];
            prefix_sum=prefix_sum%k;
            cout<<prefix_sum<<"\n";
            // for negative numbers, modules is num+k
            // for positive number (n+(x*k))%k=n
            // for negative number (-n+(x*k))%k!=-n
            if(prefix_sum<0) prefix_sum+=k;
            if(mp.find(prefix_sum%k)!=mp.end()){
                ans+=mp[prefix_sum%k];
                mp[prefix_sum%k]++;
            }
            else
             mp[prefix_sum%k]++;
        }
        return ans;
    }
};
