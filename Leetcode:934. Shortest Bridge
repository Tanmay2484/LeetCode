/* 934. Shortest Bridge
  Link:https://leetcode.com/problems/shortest-bridge/description/
*/
class Solution {
public:
    vector<pair<int,int>> mu{
    {1,0},{0,1},
    {-1,0},{0,-1}
};
void dfs(int x,int y,vector<vector<int>> &a,vector<vector<int>> &vis,queue<pair<int,int>> &q,int n,int m){
    q.push({x,y});
    vis[x][y]=1;
    for(auto mo : mu){
        int nx=mo.first+x;
        int ny=mo.second+y;
        if(nx>=0 && ny>=0 && nx<n && ny<m && !vis[nx][ny] && a[nx][ny]==1){
            dfs(nx,ny,a,vis,q,n,m);
        }
    }  
}
int shortestBridge(vector<vector<int>>& a) {
    int n=a.size();
    int m=a[0].size();
    queue<pair<int,int>> q;
    vector<vector<int>> vis(n,vector<int>(m,0));
    int cc=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(a[i][j]==1){
                cc++;
                dfs(i,j,a,vis,q,n,m);
                break;
            }
        }
        if(cc==1) break;
    }
    int c=0;
    while(!q.empty()){
        int sz=q.size();
        while(sz--){
            auto x=q.front();
            q.pop();
            for(auto mo : mu){
                int nx=x.first+mo.first,ny=x.second+mo.second;
                if(nx>=0 && ny>=0 && nx<n && ny<m && !vis[nx][ny]){
                    if(a[nx][ny]==0){
                        vis[nx][ny]=1;
                        q.push({nx,ny});
                    }
                    else if(a[nx][ny]==1){
                        return c;
                    }
                }
            }
        }
        c++;
    }
    return 0;
}
};
