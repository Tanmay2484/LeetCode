/*2444. Count Subarrays With Fixed Bounds
  Link: https://leetcode.com/problems/count-subarrays-with-fixed-bounds/description/
*/
class Solution
{
public:
    long long countSubarrays(vector<int> &nums, int minK, int maxK)
    {
        int n = nums.size();
        bool b1 = false; // =true when we find minK
        bool b2 = false; // =true when we find maxK
        int st = 0;      // starting point of the subarray
        int s1 = 0;      // last encountered position of minK
        int s2 = 0;      // last encountered position of maxK
        long long ans = 0;
        for (int i = 0; i < n; i++)
        {
            if (nums[i] > maxK || nums[i] < minK)
            {
                b1 = false;
                b2 = false;
                st = i + 1;
            }
            if (nums[i] == minK)
            {
                b1 = true;
                s1 = i;
            }
            if (nums[i] == maxK)
            {
                b2 = true;
                s2 = i;
            }
            if (b1 == true && b2 == true)
            {
                ans += (min(s1, s2) - st + 1);
            }
        }
        return ans;
    }
};
