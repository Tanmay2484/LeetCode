/* 2101. Detonate the Maximum Bombs
  Link: https://leetcode.com/problems/detonate-the-maximum-bombs/description/
*/
class Solution {
public:
    vector <int> visited;
    vector <vector<int>> graph;
    int n;
    void dfs(int node){
        for (int nei: graph[node]){
            if (visited[nei]==0){
                visited[nei]=1;
                dfs(nei);
            }
        }
    }
    int find(){
        int ans=0;
        for (int i=0;i<n;i++){
            if (visited[i]) ans+=1;
        }
        return ans;
    }
    int maximumDetonation(vector<vector<int>>& bombs) {
        ios_base::sync_with_stdio(false); cin.tie(NULL);
        n=bombs.size();
        vector <vector<int>> temp_graph(n);
        graph=temp_graph;
        for (int i=0;i<n;i++){
            for (int j=i+1;j<n;j++){
                int x1=bombs[i][0],y1=bombs[i][1],r1=bombs[i][2];
                int x2=bombs[j][0],y2=bombs[j][1],r2=bombs[j][2];
                if (sqrt(pow(x1-x2,2)+pow(y1-y2,2))<=r1) graph[i].push_back(j);
                if (sqrt(pow(x1-x2,2)+pow(y1-y2,2))<=r2) graph[j].push_back(i);
            }
        }
        int res=1;
        for (int i=0;i<n;i++){
            vector<int> temp(n,0);
            visited=temp;
            visited[i]=1;
            dfs(i);
            res=max(res,find());
        }
        return res;
    }
};
